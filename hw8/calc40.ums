# File calc40.ums contains calculator-related data structures and functions.

########################################################
#                     Conventions                      #
#     * r0 - always set to zero                        #
#     * r1 - always holds return address               #
#     * r2 - call stack pointer                        #
#     * r3 - value stack pointer                       #
#     * r4 - program state flag                        #
#     * r5 - volatile register (return from functions) #
#     * r6 - volatile register                         #
#     * r7 - volatile register                         #
########################################################


########################################################
#              Initializing Data Structures            #
########################################################

.section init 
    .temps r6, r7

    # Allocating space for valuestack #
    .space 10000
        valuestack:

    r3 := valuestack 


    # Allocating space for jumptable #
    jumptable:
        .space 256  # Handles all possible ASCII input characters

    # Initializing jumptable #
    init_jumptable:
        push r3 on stack r2
        push r4 on stack r2

        r3 := jumptable
        r4 := jumptable + 256

        goto set_input_error


    set_input_error:
        m[r0][r3] := input_error
        r3 := r3 + 1 
        if (r3 <s r4) goto set_input_error using r5 # Looping through all cases

        pop r4 off stack r2
        pop r3 off stack r2

    set_digits:
        m[r0][jumptable + '0'] := dig
        m[r0][jumptable + '1'] := dig
        m[r0][jumptable + '2'] := dig
        m[r0][jumptable + '3'] := dig
        m[r0][jumptable + '4'] := dig
        m[r0][jumptable + '5'] := dig
        m[r0][jumptable + '6'] := dig
        m[r0][jumptable + '7'] := dig
        m[r0][jumptable + '8'] := dig
        m[r0][jumptable + '9'] := dig
    set_newline:
        m[r0][jumptable + '\n'] := print
    set_space:
        m[r0][jumptable + ' '] := waiting
.section text
    dig:
        pop r4 off stack r2     # flag for entering/waiting
        # was in entering 
        if (r4 == 1) goto process_multi_dig using r5
        r1 := r1 - '0'
        push r1 on stack r3

        goto entering

    process_multi_dig:
    
        
        r1 := r1 - '0'

        #from waiting state
        pop r4 off stack r3
        r4 := r4 * 10
        r4 := r4 + r1

        push r4 on stack r3

        goto entering


      


    
# Outputs an error for unsupported commands
.section text
    input_error:

        output "Unknown character '" 
        output r1
        output "'\n"
        goto waiting
        


.section text
    main: 
        push r1 on stack r2
        goto waiting linking r1


        pop r5 off stack r2
        goto r5



########################################################
#                   Main Calculator Loop               #
########################################################
    waiting:
        push r1 on stack r2     # save r1 which is return address for main
        push r4 on stack r2     # saving non-volatile register
                
        r1 := input()           # get first input of program
        r4 := 0
        goto waiting_with_characters

    # r4 is the flag
    entering:
        r4 := 1

        r1 := input()

        goto waiting_with_characters


    waiting_with_characters:

        push r4 on stack r2     # pushing flag for program state


        if (r1 == -1) goto kill_program using r5
        
        # r4 is the flag for program state, must be set to 0 at every non-digit command
        r5 := jumptable + r1
        r4 := m[r0][r5]


        goto r4 


########################################################
#                    Functions                         #
########################################################

## ADD
.section init 
    m[r0][jumptable + '+'] := add

.section text
    add: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        r1 := valuestack - r3

        if (r1 <s 2) goto stack_underflow2 using r5
        
        pop r4 off stack r3
        pop r5 off stack r3
        
        r4 := r5 + r4

        push r4 on stack r3
        
        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting

## Mult
.section init
    m[r0][jumptable + '*'] := mult

.section text
    mult: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        r1 := valuestack - r3

        if (r1 <s 2) goto stack_underflow2 using r5
        
        pop r4 off stack r3
        pop r5 off stack r3
        
        r4 := r5 * r4

        push r4 on stack r3
        
        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting



## Sub
.section init
    m[r0][jumptable + '-'] := sub

.section text
    sub: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        r1 := valuestack - r3

        if (r1 <s 2) goto stack_underflow2 using r5
        
        pop r4 off stack r3
        pop r5 off stack r3
        
        r4 := r5 - r4

        push r4 on stack r3
        
        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting
## Div Still need to do signed division
.section init
    m[r0][jumptable + '/'] := div

.section text
    div: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        r1 := valuestack - r3

        if (r1 <s 2) goto stack_underflow2 using r5
        pop r4 off stack r3
        if (r4 == 0) goto divide_zero using r5
        
        pop r5 off stack r3
        
        if (r5 <s 0) goto first_neg using r1
        if (r4 <s 0) goto second_neg using r1
        regular_div:
            r4 := r5 / r4
            goto end_div
        first_neg:
            if (r4 <s 0) goto both_neg using r1
            r5 := r5 * -1
            r4 := r5 / r4
            r4 := r4 * -1
            goto end_div
        
        second_neg:
            if (r5 <s 0) goto both_neg using r1
            r4 := r4 * -1
            r4 := r5 / r4
            r4 := r4 * -1
            goto end_div
        both_neg:
            r4 := r4 * -1
            r5 := r5 * -1
            r4 := r5 / r4

        end_div:
            push r4 on stack r3
            pop r1 off stack r2
            pop r5 off stack r2
            pop r4 off stack r2
            goto waiting
## OR
.section init
    m[r0][jumptable + '|'] := or
.section text
    or: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        r1 := valuestack - r3

        if (r1 <s 2) goto stack_underflow2 using r5
        
        pop r4 off stack r3
        pop r5 off stack r3
        
        r4 := r5 | r4

        push r4 on stack r3
        
        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting

##AND
.section init
    m[r0][jumptable + '&'] := and
.section text
    and: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        r1 := valuestack - r3

        if (r1 <s 2) goto stack_underflow2 using r5
        
        pop r4 off stack r3
        pop r5 off stack r3
        
        r4 := r5 & r4

        push r4 on stack r3
        
        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting
## change
.section init
    m[r0][jumptable + 'c'] := change
.section text
    change: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        r1 := valuestack - r3

        if (r1 <s 1) goto stack_underflow1 using r5
        
        pop r4 off stack r3
        r4 := r4 * -1

        push r4 on stack r3
        
        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting

## comp
.section init
    m[r0][jumptable + '~'] := comp
.section text
    comp: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        r1 := valuestack - r3

        if (r1 <s 1) goto stack_underflow1 using r5
        
        pop r4 off stack r3
        r4 := ~r4

        push r4 on stack r3
        
        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting
# swap
.section init
    m[r0][jumptable + 's'] := swap
.section text
    swap: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        r1 := valuestack - r3

        if (r1 <s 2) goto stack_underflow2 using r5
        
        pop r4 off stack r3
        pop r5 off stack r3
        push r4 on stack r3
        push r5 on stack r3
        
        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting

# DUPE
.section init
    m[r0][jumptable + 'd'] := DUPE
.section text
    DUPE: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        r1 := valuestack - r3

        if (r1 <s 1) goto stack_underflow1 using r5
        
        pop r4 off stack r3
        r5 := r4
        
        
        push r4 on stack r3
        push r5 on stack r3
        
        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting

# Discard
.section init
    m[r0][jumptable + 'p'] := discard
.section text
    discard: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        r1 := valuestack - r3

        if (r1 <s 1) goto stack_underflow1 using r5
        
        pop r4 off stack r3
        
        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting

# Zap
.section init
    m[r0][jumptable + 'z'] := zap  #hehehe
.section text
    zap: 
        push r4 on stack r2
        push r5 on stack r2
        push r1 on stack r2

        goto zapstack linking r1  

        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting

    zapstack:
        if (r3 == valuestack) goto r1 using r5
        pop r4 off stack r3
        goto zapstack



########################################################
#                Err Functions                         #
########################################################
    

    stack_underflow2:
        output "Stack underflow---expected at least 2 elements\n"

        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting
    stack_underflow1:
        output "Stack underflow---expected at least 1 element\n"
        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting

    divide_zero:
        output "Division by zero\n"
        push r4 on stack r3

        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2
        goto waiting
    
    kill_program:
        halt